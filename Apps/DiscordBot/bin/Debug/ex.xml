<?xml version="1.0"?>
<doc>
<assembly>
<name>
ex
</name>
</assembly>
<members>
<member name="T:ex.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:ex.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:ex.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="F:ex.CommandHandler.UNKNOWN_COMMAND">
 <summary>
 This adds a question mark reaction to invalid command attempts
 Simply remove this line and the usage of <see cref="F:ex.CommandHandler.UNKNOWN_COMMAND"/> in <see cref="M:ex.CommandHandler.HandleCommandAsync(Discord.WebSocket.SocketMessage)"/>
 </summary>
</member>
<member name="M:ex.CommandHandler.InitializeAsync">
 <summary>
 While this example makes use of Dependency Injection, it is not necessarily required.
 If you are not implementing DI, set the second parameter of AddModulesAsync() to Nothing
 </summary>
</member>
<member name="M:ex.CommandHandler.HandleCommandAsync(Discord.WebSocket.SocketMessage)">
 <summary>
 Process all incoming messages to determine if they are a command or not
 </summary>
 <param name="message">Incoming Discord message - recieved from server channels and direct messages</param>
</member>
<member name="P:ex.ExampleBot.BotToken">
 <summary>
 The property retrieves your bot token from a text file for use while logging in.
 Since tokens are considered sensitive data, this is one method to avoid hard-coding it.
 </summary>
</member>
<member name="M:ex.ExampleBot.ConfigureServices">
 <summary>
 Dependency Injection is not a requirement, however, it's extremely useful when working with the <see cref="T:Discord.Commands.CommandService"/>.
 Any services that your various command modules may require can simply be added to the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceProvider"/> 
 which allows for auto-injection into your service constructors.
 
 Check out the DI guides for more info ~> https://docs.stillu.cc/guides/commands/dependency-injection.html
 </summary>
</member>
<member name="M:ex.LogService.ClientLog(Discord.LogMessage)">
 <summary>
 Log client events to the console
 </summary>
</member>
<member name="M:ex.LogService.CommandLog(Discord.Optional{Discord.Commands.CommandInfo},Discord.Commands.ICommandContext,Discord.Commands.IResult)">
 <summary>
 Log command error
 PLEASE DO NOT IMPLEMENT THIS AS IS 
 Currently this simply the default error reason to eithe the console or the channel the command was invoked in
 </summary>
</member>
</members>
</doc>
